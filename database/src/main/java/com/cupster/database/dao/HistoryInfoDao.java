package com.cupster.database.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.cupster.database.model.HistoryInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HISTORY_INFO".
*/
public class HistoryInfoDao extends AbstractDao<HistoryInfo, Long> {

    public static final String TABLENAME = "HISTORY_INFO";

    /**
     * Properties of entity HistoryInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Freshtime = new Property(1, String.class, "freshtime", false, "FRESHTIME");
        public final static Property Weaid = new Property(2, String.class, "weaid", false, "WEAID");
        public final static Property Week = new Property(3, String.class, "week", false, "WEEK");
        public final static Property Cityno = new Property(4, String.class, "cityno", false, "CITYNO");
        public final static Property Citynm = new Property(5, String.class, "citynm", false, "CITYNM");
        public final static Property Cityid = new Property(6, String.class, "cityid", false, "CITYID");
        public final static Property Uptime = new Property(7, String.class, "uptime", false, "UPTIME");
        public final static Property Temperature = new Property(8, String.class, "temperature", false, "TEMPERATURE");
        public final static Property Humidity = new Property(9, String.class, "humidity", false, "HUMIDITY");
        public final static Property Aqi = new Property(10, String.class, "aqi", false, "AQI");
        public final static Property Weather = new Property(11, String.class, "weather", false, "WEATHER");
        public final static Property Weather_icon = new Property(12, String.class, "weather_icon", false, "WEATHER_ICON");
        public final static Property Wind = new Property(13, String.class, "wind", false, "WIND");
        public final static Property Winp = new Property(14, String.class, "winp", false, "WINP");
        public final static Property Tempnum = new Property(15, int.class, "tempnum", false, "TEMPNUM");
        public final static Property Weatid = new Property(16, String.class, "weatid", false, "WEATID");
        public final static Property Windid = new Property(17, String.class, "windid", false, "WINDID");
        public final static Property Winpid = new Property(18, String.class, "winpid", false, "WINPID");
    }


    public HistoryInfoDao(DaoConfig config) {
        super(config);
    }
    
    public HistoryInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HISTORY_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"FRESHTIME\" TEXT," + // 1: freshtime
                "\"WEAID\" TEXT," + // 2: weaid
                "\"WEEK\" TEXT," + // 3: week
                "\"CITYNO\" TEXT," + // 4: cityno
                "\"CITYNM\" TEXT," + // 5: citynm
                "\"CITYID\" TEXT," + // 6: cityid
                "\"UPTIME\" TEXT," + // 7: uptime
                "\"TEMPERATURE\" TEXT," + // 8: temperature
                "\"HUMIDITY\" TEXT," + // 9: humidity
                "\"AQI\" TEXT," + // 10: aqi
                "\"WEATHER\" TEXT," + // 11: weather
                "\"WEATHER_ICON\" TEXT," + // 12: weather_icon
                "\"WIND\" TEXT," + // 13: wind
                "\"WINP\" TEXT," + // 14: winp
                "\"TEMPNUM\" INTEGER NOT NULL ," + // 15: tempnum
                "\"WEATID\" TEXT," + // 16: weatid
                "\"WINDID\" TEXT," + // 17: windid
                "\"WINPID\" TEXT);"); // 18: winpid
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HISTORY_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, HistoryInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String freshtime = entity.getFreshtime();
        if (freshtime != null) {
            stmt.bindString(2, freshtime);
        }
 
        String weaid = entity.getWeaid();
        if (weaid != null) {
            stmt.bindString(3, weaid);
        }
 
        String week = entity.getWeek();
        if (week != null) {
            stmt.bindString(4, week);
        }
 
        String cityno = entity.getCityno();
        if (cityno != null) {
            stmt.bindString(5, cityno);
        }
 
        String citynm = entity.getCitynm();
        if (citynm != null) {
            stmt.bindString(6, citynm);
        }
 
        String cityid = entity.getCityid();
        if (cityid != null) {
            stmt.bindString(7, cityid);
        }
 
        String uptime = entity.getUptime();
        if (uptime != null) {
            stmt.bindString(8, uptime);
        }
 
        String temperature = entity.getTemperature();
        if (temperature != null) {
            stmt.bindString(9, temperature);
        }
 
        String humidity = entity.getHumidity();
        if (humidity != null) {
            stmt.bindString(10, humidity);
        }
 
        String aqi = entity.getAqi();
        if (aqi != null) {
            stmt.bindString(11, aqi);
        }
 
        String weather = entity.getWeather();
        if (weather != null) {
            stmt.bindString(12, weather);
        }
 
        String weather_icon = entity.getWeather_icon();
        if (weather_icon != null) {
            stmt.bindString(13, weather_icon);
        }
 
        String wind = entity.getWind();
        if (wind != null) {
            stmt.bindString(14, wind);
        }
 
        String winp = entity.getWinp();
        if (winp != null) {
            stmt.bindString(15, winp);
        }
        stmt.bindLong(16, entity.getTempnum());
 
        String weatid = entity.getWeatid();
        if (weatid != null) {
            stmt.bindString(17, weatid);
        }
 
        String windid = entity.getWindid();
        if (windid != null) {
            stmt.bindString(18, windid);
        }
 
        String winpid = entity.getWinpid();
        if (winpid != null) {
            stmt.bindString(19, winpid);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, HistoryInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String freshtime = entity.getFreshtime();
        if (freshtime != null) {
            stmt.bindString(2, freshtime);
        }
 
        String weaid = entity.getWeaid();
        if (weaid != null) {
            stmt.bindString(3, weaid);
        }
 
        String week = entity.getWeek();
        if (week != null) {
            stmt.bindString(4, week);
        }
 
        String cityno = entity.getCityno();
        if (cityno != null) {
            stmt.bindString(5, cityno);
        }
 
        String citynm = entity.getCitynm();
        if (citynm != null) {
            stmt.bindString(6, citynm);
        }
 
        String cityid = entity.getCityid();
        if (cityid != null) {
            stmt.bindString(7, cityid);
        }
 
        String uptime = entity.getUptime();
        if (uptime != null) {
            stmt.bindString(8, uptime);
        }
 
        String temperature = entity.getTemperature();
        if (temperature != null) {
            stmt.bindString(9, temperature);
        }
 
        String humidity = entity.getHumidity();
        if (humidity != null) {
            stmt.bindString(10, humidity);
        }
 
        String aqi = entity.getAqi();
        if (aqi != null) {
            stmt.bindString(11, aqi);
        }
 
        String weather = entity.getWeather();
        if (weather != null) {
            stmt.bindString(12, weather);
        }
 
        String weather_icon = entity.getWeather_icon();
        if (weather_icon != null) {
            stmt.bindString(13, weather_icon);
        }
 
        String wind = entity.getWind();
        if (wind != null) {
            stmt.bindString(14, wind);
        }
 
        String winp = entity.getWinp();
        if (winp != null) {
            stmt.bindString(15, winp);
        }
        stmt.bindLong(16, entity.getTempnum());
 
        String weatid = entity.getWeatid();
        if (weatid != null) {
            stmt.bindString(17, weatid);
        }
 
        String windid = entity.getWindid();
        if (windid != null) {
            stmt.bindString(18, windid);
        }
 
        String winpid = entity.getWinpid();
        if (winpid != null) {
            stmt.bindString(19, winpid);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public HistoryInfo readEntity(Cursor cursor, int offset) {
        HistoryInfo entity = new HistoryInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // freshtime
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // weaid
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // week
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // cityno
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // citynm
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // cityid
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // uptime
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // temperature
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // humidity
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // aqi
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // weather
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // weather_icon
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // wind
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // winp
            cursor.getInt(offset + 15), // tempnum
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // weatid
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // windid
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18) // winpid
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, HistoryInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFreshtime(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setWeaid(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setWeek(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCityno(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCitynm(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCityid(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUptime(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setTemperature(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setHumidity(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setAqi(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setWeather(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setWeather_icon(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setWind(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setWinp(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setTempnum(cursor.getInt(offset + 15));
        entity.setWeatid(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setWindid(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setWinpid(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(HistoryInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(HistoryInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(HistoryInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
